FlowScript {
  // Document Structure
  Document = Line*
  Line = BlankLine | RelationshipExpression | Element

  Element = Modifier* Content
  Content = State | Insight | Question | Completion | Alternative | Block | Statement

  BlankLine = space* "\n"
  Statement = (~("\n" | "{" | "}") any)+ "\n"?

  // Blocks (thought blocks / atomic processing units)
  Block = "{" (space | "\n")* BlockLine* (space | "\n")* "}"
  BlockLine = (space | "\n")* (RelationshipExpression | Element) (space | "\n")*

  // Relationship Expressions (must come before Statement in Line)
  RelationshipExpression = NodeText RelOpNodePair+
  RelOpNodePair = RelOp NodeText

  NodeText = ~insightPrefix (~("<->" | "->" | "<-" | "=>" | "><[" | "><" | "\n") any)+
  insightPrefix = "thought:" | "action:"

  RelOp = bidirectional | reverseCausal | causal | temporal | tensionWithAxis | tensionWithoutAxis

  bidirectional = "<->"
  reverseCausal = "<-"
  causal = "->"
  temporal = "=>"
  tensionWithAxis = "><[" axisLabel "]"
  tensionWithoutAxis = "><"

  axisLabel = (~"]" any)+

  // Modifiers (highest precedence)
  Modifier = urgent | strongPositive | highConfidence | lowConfidence

  urgent = "!"
  strongPositive = "++"
  highConfidence = "*"
  lowConfidence = "~"

  // State markers
  State = decidedWithFields | decidedWithoutFields
        | blockedWithFields | blockedWithoutFields
        | parkingWithFields | parkingWithoutFields
        | exploring

  decidedWithFields = "[decided(" decidedFields? ")]"
  decidedFields = decidedField (space* "," space* decidedField)*
  decidedField = rationalField | onField
  rationalField = "rationale:" space* string
  onField = "on:" space* dateString

  decidedWithoutFields = "[decided]"

  blockedWithFields = "[blocked(" blockedFields? ")]"
  blockedFields = blockedField (space* "," space* blockedField)*
  blockedField = reasonField | sinceField
  reasonField = "reason:" space* string
  sinceField = "since:" space* dateString

  blockedWithoutFields = "[blocked]"

  parkingWithFields = "[parking(" parkingFields? ")]"
  parkingFields = parkingField (space* "," space* parkingField)*
  parkingField = whyField | untilField
  whyField = "why:" space* string
  untilField = "until:" space* string

  parkingWithoutFields = "[parking]"

  exploring = "[exploring]"

  // Insights, Questions, Commands
  Insight = Thought | Action

  // Insights can have optional relationship chains
  Thought = "thought:" thoughtContent RelOpNodePair*
  Action = "action:" actionContent RelOpNodePair*

  // Content excludes relationship operators and block delimiters (they're in RelOpNodePair)
  thoughtContent = (~("\n" | "}" | "->" | "<-" | "<=>" | "=>" | "><[" | "><") any)+
  actionContent = (~("\n" | "}" | "->" | "<-" | "<=>" | "=>" | "><[" | "><") any)+

  Question = "?" (~("\n" | "}") any)*
  Completion = "âœ“" (~("\n" | "}") any)*

  // Alternatives
  Alternative = "||" (~("\n" | "}") any)*

  // Lexical elements
  string = "\"" stringChar* "\""
  stringChar = ~("\"" | "\\") any
             | escapeSequence

  escapeSequence = "\\" ("\"" | "\\" | "n" | "t" | "r")

  dateString = "\"" isoDate "\""
  isoDate = digit digit digit digit "-" digit digit "-" digit digit
           ("T" digit digit ":" digit digit ":" digit digit "Z")?

  identifier = letter (letter | digit | "_" | "-")*

  // Lexical rules (whitespace handling)
  space := " " | "\t" | "\r"
}
